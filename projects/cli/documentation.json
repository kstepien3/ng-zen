{
  "pipes": [],
  "interfaces": [],
  "injectables": [],
  "guards": [],
  "interceptors": [],
  "classes": [],
  "directives": [],
  "components": [
    {
      "name": "ZenAvatarComponent",
      "id": "component-ZenAvatarComponent-f26ce91f1c95a5d853a968cb31902e9de930468ade56fce34140588cca4b3e82289af896feddd6915ea48dc5d1d09d6ac58c881cc01019cdefa365a1c72f8295",
      "file": "projects/cli/src/schematics/components/files/avatar/avatar.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "zen-avatar",
      "styleUrls": [],
      "styles": [],
      "template": "@if (src()) {\n  <img [alt]=\"alt()\" [ngSrc]=\"src()\" fill onerror=\"console.log('test')\" />\n} @else {\n  <ng-content />\n}\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "alt",
          "defaultValue": "input<string>('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Sets or retrieves a text alternative to the graphic.</p>\n",
          "line": 65,
          "rawdescription": "\n\nSets or retrieves a text alternative to the graphic.\n",
          "modifierKind": [148]
        },
        {
          "name": "src",
          "defaultValue": "input<string>('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Name of the source image. Image name will be processed by the image loader,\nand the final URL will be applied as the src property of the image.</p>\n",
          "line": 61,
          "rawdescription": "\n\nName of the source image. Image name will be processed by the image loader,\nand the final URL will be applied as the src property of the image.\n",
          "modifierKind": [148]
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [
        {
          "name": "NgOptimizedImage"
        }
      ],
      "description": "<p>A component to display an avatar image.\nIf a valid image source URL is provided, it will render an image element.\nOtherwise, it will display projected content.</p>\n<p>This component utilizes Angular&#39;s optimized image directives for enhanced performance.</p>\n<h3>Usage</h3>\n<p>To use the component, you can provide an image source or project content:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;!-- If an image source is provided, it will display the image --&gt;\n&lt;zen-avatar [src]=&quot;&#39;/path/to/image.jpg&#39;&quot; /&gt;\n\n&lt;!-- If no image source is provided, it will display the projected content --&gt;\n&lt;zen-avatar&gt; A &lt;/zen-avatar&gt;</code></pre></div><h3>CSS Custom Properties</h3>\n<p>You can customize the avatar using CSS custom properties:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-css\">zen-avatar {\n --zen-avatar-size: 16px;\n --zen-avatar-bg-color: black;\n --zen-avatar-color: white;\n --zen-avatar-font-size: small;\n}</code></pre></div><b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;zen-avatar src=&quot;https://picsum.photos/32&quot; /&gt;</code></pre></div><p>See <a href=\"https://github.com/Kordrad/ng-zen\">GitHub</a></p>\n",
      "rawdescription": "\n\nA component to display an avatar image.\nIf a valid image source URL is provided, it will render an image element.\nOtherwise, it will display projected content.\n\nThis component utilizes Angular's optimized image directives for enhanced performance.\n\n### Usage\n\nTo use the component, you can provide an image source or project content:\n\n```html\n<!-- If an image source is provided, it will display the image -->\n<zen-avatar [src]=\"'/path/to/image.jpg'\" />\n\n<!-- If no image source is provided, it will display the projected content -->\n<zen-avatar> A </zen-avatar>\n```\n\n### CSS Custom Properties\n\nYou can customize the avatar using CSS custom properties:\n\n```css\nzen-avatar {\n --zen-avatar-size: 16px;\n --zen-avatar-bg-color: black;\n --zen-avatar-color: white;\n --zen-avatar-font-size: small;\n}\n```\n\n```html\n<zen-avatar src=\"https://picsum.photos/32\" />\n```\nSee [GitHub](https://github.com/Kordrad/ng-zen)\n",
      "type": "component",
      "sourceCode": "import { NgOptimizedImage } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\n\n/**\n * A component to display an avatar image.\n * If a valid image source URL is provided, it will render an image element.\n * Otherwise, it will display projected content.\n *\n * This component utilizes Angular's optimized image directives for enhanced performance.\n *\n * ### Usage\n *\n * To use the component, you can provide an image source or project content:\n *\n * ```html\n * <!-- If an image source is provided, it will display the image -->\n * <zen-avatar [src]=\"'/path/to/image.jpg'\" />\n *\n * <!-- If no image source is provided, it will display the projected content -->\n * <zen-avatar> A </zen-avatar>\n * ```\n *\n * ### CSS Custom Properties\n *\n * You can customize the avatar using CSS custom properties:\n *\n * ```css\n * zen-avatar {\n *  --zen-avatar-size: 16px;\n *  --zen-avatar-bg-color: black;\n *  --zen-avatar-color: white;\n *  --zen-avatar-font-size: small;\n * }\n * ```\n *\n * @example\n * <zen-avatar src=\"https://picsum.photos/32\" />\n *\n * @author Konrad Stępień\n * @license {@link https://github.com/Kordrad/ng-zen?tab=BSD-2-Clause-1-ov-file|BSD-2-Clause}\n * @see [GitHub](https://github.com/Kordrad/ng-zen)\n */\n@Component({\n  selector: 'zen-avatar',\n  imports: [NgOptimizedImage],\n  template: `\n    @if (src()) {\n      <img [alt]=\"alt()\" [ngSrc]=\"src()\" fill onerror=\"console.log('test')\" />\n    } @else {\n      <ng-content />\n    }\n  `,\n  styleUrl: './avatar.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ZenAvatarComponent {\n  /**\n   * Name of the source image. Image name will be processed by the image loader,\n   * and the final URL will be applied as the src property of the image.\n   */\n  readonly src = input<string>('');\n  /**\n   * Sets or retrieves a text alternative to the graphic.\n   */\n  readonly alt = input<string>('');\n}\n",
      "styleUrl": "./avatar.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": []
    },
    {
      "name": "ZenButtonComponent",
      "id": "component-ZenButtonComponent-3cf692f2e38f4805b6b777a8b90ee71a48d68b8c50ea63a0c8490edc11009f4233f459017923bf930081aa50981a9f4b21b8280fe8dc95e4db2cb604a9c0073e",
      "file": "projects/cli/src/schematics/components/files/button/button.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "button[zen-button], button[zen-btn], a[zen-button], a[zen-btn]",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content />\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "<p>ZenButtonComponent is a reusable button component designed to provide\na consistent and customizable button style across the application.\nIt can be used with both <code>&lt;button&gt;</code> and <code>&lt;a&gt;</code> HTML elements by applying\nthe <code>zen-button</code> attribute.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;button zen-btn&gt; ... &lt;/button&gt;</code></pre></div><p>See <a href=\"https://github.com/Kordrad/ng-zen\">GitHub</a></p>\n",
      "rawdescription": "\n\nZenButtonComponent is a reusable button component designed to provide\na consistent and customizable button style across the application.\nIt can be used with both `<button>` and `<a>` HTML elements by applying\nthe `zen-button` attribute.\n\n```html\n<button zen-btn> ... </button>\n```\nSee [GitHub](https://github.com/Kordrad/ng-zen)\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n/**\n * ZenButtonComponent is a reusable button component designed to provide\n * a consistent and customizable button style across the application.\n * It can be used with both `<button>` and `<a>` HTML elements by applying\n * the `zen-button` attribute.\n *\n * @example\n * <button zen-btn> ... </button>\n *\n * @author Konrad Stępień\n * @license {@link https://github.com/Kordrad/ng-zen?tab=BSD-2-Clause-1-ov-file|BSD-2-Clause}\n * @see [GitHub](https://github.com/Kordrad/ng-zen)\n */\n@Component({\n  // eslint-disable-next-line @angular-eslint/component-selector\n  selector: 'button[zen-button], button[zen-btn], a[zen-button], a[zen-btn]',\n  template: `\n    <ng-content />\n  `,\n  styleUrl: './button.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ZenButtonComponent {}\n",
      "styleUrl": "./button.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": []
    },
    {
      "name": "ZenCheckboxComponent",
      "id": "component-ZenCheckboxComponent-1019dffbec1fa39fa746c702d18ad67f7d715079d3124e3bfb7fba83a909329ab5bd0adbdadcf24e38eb56c5aa2bde822f52710ae6049d175cb6131c9821415a",
      "file": "projects/cli/src/schematics/components/files/checkbox/checkbox.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ZenCheckboxComponent), multi: true,\n}",
          "type": "component"
        }
      ],
      "selector": "zen-checkbox",
      "styleUrls": ["./checkbox.component.scss"],
      "styles": [],
      "template": "<input\n  [attr.aria-disabled]=\"disabled()\"\n  [attr.id]=\"id()\"\n  [disabled]=\"disabled()\"\n  [ngModel]=\"value()\"\n  (ngModelChange)=\"onInputChange($event)\"\n  #inputElement\n  type=\"checkbox\"\n/>\n@if (inputElement.indeterminate) {\n  ─\n} @else if (inputElement.checked) {\n  ✓\n}\n<!-- @else { ✕ } -->\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Determines if the checkbox is disabled.</p>\n",
          "line": 57,
          "rawdescription": "\nDetermines if the checkbox is disabled.",
          "modifierKind": [148],
          "required": false
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Sets the HTML id attribute for the checkbox element.</p>\n",
          "line": 61,
          "rawdescription": "\nSets the HTML id attribute for the checkbox element.",
          "modifierKind": [148],
          "required": false
        },
        {
          "name": "value",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Holds the current checkbox value.</p>\n",
          "line": 55,
          "rawdescription": "\nHolds the current checkbox value.",
          "modifierKind": [148],
          "required": false
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Determines if the checkbox is disabled.</p>\n",
          "line": 57,
          "rawdescription": "\nDetermines if the checkbox is disabled.",
          "modifierKind": [148],
          "required": false
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Sets the HTML id attribute for the checkbox element.</p>\n",
          "line": 61,
          "rawdescription": "\nSets the HTML id attribute for the checkbox element.",
          "modifierKind": [148],
          "required": false
        },
        {
          "name": "required",
          "defaultValue": "input(false, { transform: booleanAttribute })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Determines if the input is required.</p>\n",
          "line": 59,
          "rawdescription": "\nDetermines if the input is required.",
          "modifierKind": [148]
        },
        {
          "name": "value",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Holds the current checkbox value.</p>\n",
          "line": 55,
          "rawdescription": "\nHolds the current checkbox value.",
          "modifierKind": [148],
          "required": false
        }
      ],
      "methodsClass": [
        {
          "name": "onInputChange",
          "args": [
            {
              "name": "value",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 91,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\nHandles checkbox change event",
          "description": "<p>Handles checkbox change event</p>\n",
          "jsdoctags": [
            {
              "name": "value",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "FormsModule",
          "type": "module"
        }
      ],
      "description": "<p>ZenCheckboxComponent is a reusable checkbox component designed to provide\na consistent and customizable checkbox style across the application.\nIt supports Angular forms integration and provides two-way data binding\nfor boolean values.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;zen-checkbox value=&quot;false&quot; /&gt;</code></pre></div><p>See <a href=\"https://github.com/kstepien3/ng-zen\">GitHub</a></p>\n",
      "rawdescription": "\n\nZenCheckboxComponent is a reusable checkbox component designed to provide\na consistent and customizable checkbox style across the application.\nIt supports Angular forms integration and provides two-way data binding\nfor boolean values.\n\n```html\n<zen-checkbox value=\"false\" />\n```\n\nSee [GitHub](https://github.com/kstepien3/ng-zen)\n",
      "type": "component",
      "sourceCode": "import { ControlValueAccessor, FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { booleanAttribute, ChangeDetectionStrategy, Component, forwardRef, input, model } from '@angular/core';\n\n/**\n * ZenCheckboxComponent is a reusable checkbox component designed to provide\n * a consistent and customizable checkbox style across the application.\n * It supports Angular forms integration and provides two-way data binding\n * for boolean values.\n *\n * @example\n * <zen-checkbox value=\"false\" />\n *\n * @implements {ControlValueAccessor}\n *\n * @author Konrad Stępień\n * @license {@link https://github.com/kstepien3/ng-zen?tab=BSD-2-Clause-1-ov-file|BSD-2-Clause}\n * @see [GitHub](https://github.com/kstepien3/ng-zen)\n */\n@Component({\n  selector: 'zen-checkbox',\n  standalone: true,\n  template: `\n    <input\n      [attr.aria-disabled]=\"disabled()\"\n      [attr.id]=\"id()\"\n      [disabled]=\"disabled()\"\n      [ngModel]=\"value()\"\n      (ngModelChange)=\"onInputChange($event)\"\n      #inputElement\n      type=\"checkbox\"\n    />\n    @if (inputElement.indeterminate) {\n      ─\n    } @else if (inputElement.checked) {\n      ✓\n    }\n    <!-- @else { ✕ } -->\n  `,\n  styleUrls: ['./checkbox.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [FormsModule],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ZenCheckboxComponent),\n      multi: true,\n    },\n  ],\n  host: {\n    '(blur)': 'onTouched()',\n  },\n})\nexport class ZenCheckboxComponent implements ControlValueAccessor {\n  /** Holds the current checkbox value. */\n  readonly value = model(false);\n  /** Determines if the checkbox is disabled. */\n  readonly disabled = model(false);\n  /** Determines if the input is required.*/\n  readonly required = input(false, { transform: booleanAttribute });\n  /** Sets the HTML id attribute for the checkbox element. */\n  readonly id = input<string>();\n\n  /** @ignore */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onChange: (value: boolean) => void = () => {};\n  /** @ignore */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onTouched: () => void = () => {};\n\n  /** @ignore */\n  writeValue(value: boolean): void {\n    this.value.set(value);\n  }\n\n  /** @ignore */\n  registerOnChange(fn: (value: boolean) => void): void {\n    this.onChange = fn;\n  }\n\n  /** @ignore */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /** @ignore */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled.set(isDisabled);\n  }\n\n  /** Handles checkbox change event */\n  onInputChange(value: boolean): void {\n    if (this.disabled()) return;\n\n    this.value.set(value);\n    this.onChange(value);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "// Component Variables\n$size: var(--zen-checkbox-size, 16px);\n$border-radius: var(--zen-checkbox-border-radius, 6px);\n$focus-shadow: var(--zen-checkbox-focus-shadow, 0 1px 4px hsla(0% 0% 60% / 20%) inset);\n\n// Color Palette\n$appearance: var(--zen-checkbox-appearance, hsl(0% 0% 10%));\n$disabled-opacity: var(--zen-checkbox-disabled-opacity, 0.6);\n$border: var(--zen-checkbox-border, 1px solid hsl(0% 0% 80%));\n$error: var(--zen-error, hsl(0% 70% 50%));\n$outline: var(--zen-outline, 1px solid hsl(0% 0% 60%));\n\n// Animations\n$transition-duration: var(--zen-transition-duration, 0.2s);\n\ninput {\n  position: absolute;\n  cursor: pointer;\n  opacity: 0;\n  height: 100%;\n  width: 100%;\n  padding: 0;\n  margin: 0;\n  top: 0;\n  left: 0;\n}\n\n:host {\n  background-color: white;\n  cursor: pointer;\n  border: $border;\n  border-radius: $border-radius;\n  height: $size;\n  width: $size;\n  position: relative;\n  transition:\n    background-color ease,\n    border-color ease;\n  transition-duration: $transition-duration;\n  user-select: none;\n  justify-content: center;\n  display: grid;\n  place-items: center;\n  font-size: small;\n}\n\n:host:has(input:checked) {\n  color: white;\n  background-color: $appearance;\n  border-color: $appearance;\n}\n\n:host:has(input[type='checkbox']:disabled) {\n  &,\n  input {\n    cursor: not-allowed;\n  }\n\n  opacity: $disabled-opacity;\n}\n\n:host:has(input:focus-visible) {\n  outline: $outline;\n  box-shadow: $focus-shadow;\n}\n\n:host:has(input:user-invalid) {\n  border-color: $error;\n}\n",
          "styleUrl": "./checkbox.component.scss"
        }
      ],
      "stylesData": "",
      "extends": [],
      "implements": ["ControlValueAccessor"]
    },
    {
      "name": "ZenInputComponent",
      "id": "component-ZenInputComponent-9b765aa23d7972b7ef65a5898a6bbbb54e48a5a8ad47a5c1cd24cc7038c218d645182bfe9e404b67f73753a2bb27925569e6d330e7859bc6416c2ac3bcb2347e",
      "file": "projects/cli/src/schematics/components/files/input/input.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ZenInputComponent), multi: true,\n}",
          "type": "component"
        }
      ],
      "selector": "zen-input",
      "styleUrls": ["./input.component.scss"],
      "styles": [],
      "template": "<input\n  [attr.id]=\"id()\"\n  [attr.placeholder]=\"placeholder()\"\n  [attr.required]=\"required()\"\n  [disabled]=\"disabled()\"\n  [ngModel]=\"value()\"\n  [value]=\"value()\"\n  (blur)=\"onTouched()\"\n  (ngModelChange)=\"onInputChange($event)\"\n/>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Determines if the input is disabled.</p>\n",
          "line": 48,
          "rawdescription": "\nDetermines if the input is disabled.",
          "modifierKind": [148],
          "required": false
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Sets the HTML id attribute for the input element.</p>\n",
          "line": 52,
          "rawdescription": "\nSets the HTML id attribute for the input element.",
          "modifierKind": [148],
          "required": false
        },
        {
          "name": "placeholder",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Provides a hint or example text that will be displayed</p>\n",
          "line": 54,
          "rawdescription": "\nProvides a hint or example text that will be displayed",
          "modifierKind": [148],
          "required": false
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Determines if the input is disabled.</p>\n",
          "line": 48,
          "rawdescription": "\nDetermines if the input is disabled.",
          "modifierKind": [148],
          "required": false
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Sets the HTML id attribute for the input element.</p>\n",
          "line": 52,
          "rawdescription": "\nSets the HTML id attribute for the input element.",
          "modifierKind": [148],
          "required": false
        },
        {
          "name": "placeholder",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Provides a hint or example text that will be displayed</p>\n",
          "line": 54,
          "rawdescription": "\nProvides a hint or example text that will be displayed",
          "modifierKind": [148],
          "required": false
        },
        {
          "name": "required",
          "defaultValue": "input(false, { transform: booleanAttribute })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Determines if the input is required.</p>\n",
          "line": 50,
          "rawdescription": "\nDetermines if the input is required.",
          "modifierKind": [148]
        },
        {
          "name": "value",
          "defaultValue": "model('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Holds the current input value.</p>\n",
          "line": 46,
          "rawdescription": "\nHolds the current input value.",
          "modifierKind": [148]
        }
      ],
      "methodsClass": [
        {
          "name": "onInputChange",
          "args": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 82,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\nHandles input change event",
          "description": "<p>Handles input change event</p>\n",
          "jsdoctags": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "FormsModule",
          "type": "module"
        }
      ],
      "description": "<p>ZenInputComponent is a reusable text input component designed to provide\na consistent and customizable input style across the application.\nIt supports Angular forms integration and provides two-way data binding.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;zen-input value=&quot;string&quot; /&gt;</code></pre></div><p>See <a href=\"https://github.com/kstepien3/ng-zen\">GitHub</a></p>\n",
      "rawdescription": "\n\nZenInputComponent is a reusable text input component designed to provide\na consistent and customizable input style across the application.\nIt supports Angular forms integration and provides two-way data binding.\n\n```html\n<zen-input value=\"string\" />\n```\n\nSee [GitHub](https://github.com/kstepien3/ng-zen)\n",
      "type": "component",
      "sourceCode": "import { booleanAttribute, ChangeDetectionStrategy, Component, forwardRef, input, model } from '@angular/core';\nimport { ControlValueAccessor, FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/**\n * ZenInputComponent is a reusable text input component designed to provide\n * a consistent and customizable input style across the application.\n * It supports Angular forms integration and provides two-way data binding.\n *\n * @example\n * <zen-input value=\"string\" />\n *\n * @implements {ControlValueAccessor}\n *\n * @author Konrad Stępień\n * @license {@link https://github.com/kstepien3/ng-zen?tab=BSD-2-Clause-1-ov-file|BSD-2-Clause}\n * @see [GitHub](https://github.com/kstepien3/ng-zen)\n */\n@Component({\n  selector: 'zen-input',\n  standalone: true,\n  template: `\n    <input\n      [attr.id]=\"id()\"\n      [attr.placeholder]=\"placeholder()\"\n      [attr.required]=\"required()\"\n      [disabled]=\"disabled()\"\n      [ngModel]=\"value()\"\n      [value]=\"value()\"\n      (blur)=\"onTouched()\"\n      (ngModelChange)=\"onInputChange($event)\"\n    />\n  `,\n  styleUrls: ['./input.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ZenInputComponent),\n      multi: true,\n    },\n  ],\n  imports: [FormsModule],\n})\nexport class ZenInputComponent implements ControlValueAccessor {\n  /** Holds the current input value. */\n  readonly value = model('');\n  /** Determines if the input is disabled. */\n  readonly disabled = model(false);\n  /** Determines if the input is required.*/\n  readonly required = input(false, { transform: booleanAttribute });\n  /** Sets the HTML id attribute for the input element.*/\n  readonly id = input<string>();\n  /** Provides a hint or example text that will be displayed */\n  readonly placeholder = input<string>();\n\n  /** @ignore */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onChange: (value: string) => void = () => {};\n  /** @ignore */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onTouched: () => void = () => {};\n\n  /** @ignore */\n  writeValue(value: string): void {\n    this.value.set(value);\n  }\n  /** @ignore */\n  registerOnChange(fn: (value: string) => void): void {\n    this.onChange = fn;\n  }\n  /** @ignore */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /** @ignore */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled.set(isDisabled);\n  }\n\n  /** Handles input change event */\n  onInputChange(value: string): void {\n    if (this.disabled()) return;\n\n    this.value.set(value);\n    this.onChange(value);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "// Component Variables\n$border: var(--zen-input-border, 1px solid hsl(0% 0% 80%));\n$border-radius: var(--zen-input-border-radius, 8px);\n$padding: var(--zen-input-padding, 0.5rem 1rem);\n$focus-shadow: var(--zen-input-focus-shadow, 0 1px 4px hsla(0% 0% 60% / 20%) inset);\n$placeholder-color: var(--zen-input-placeholder-color, hsl(0% 0% 60%));\n\n// Color Palette\n$outline: var(--zen-outline, 1px solid hsl(0% 0% 60%));\n$error: var(--zen-error, hsl(0% 70% 50%));\n\ninput {\n  border: $border;\n  border-radius: $border-radius;\n  padding: $padding;\n\n  &:disabled {\n    opacity: 0.6;\n  }\n\n  &:focus-visible {\n    outline: $outline;\n    box-shadow: $focus-shadow;\n  }\n\n  &:user-invalid {\n    border-color: $error;\n  }\n\n  &::placeholder {\n    color: $placeholder-color;\n  }\n}\n",
          "styleUrl": "./input.component.scss"
        }
      ],
      "stylesData": "",
      "extends": [],
      "implements": ["ControlValueAccessor"]
    },
    {
      "name": "ZenTextareaComponent",
      "id": "component-ZenTextareaComponent-37bdfe37ba0f72023ccef1c2f2e6bb2f44331172d3f664fc77f165121c3e45a7f40b288bc327b275a868714bbb1a5d315cc541e42e33ed86e045b6625065b007",
      "file": "projects/cli/src/schematics/components/files/textarea/textarea.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ZenTextareaComponent), multi: true,\n}",
          "type": "component"
        }
      ],
      "selector": "zen-textarea, zen-textarea[autoresize]",
      "styleUrls": ["./textarea.component.scss"],
      "styles": [],
      "template": "<textarea\n  [attr.id]=\"id()\"\n  [attr.placeholder]=\"placeholder()\"\n  [attr.required]=\"required()\"\n  [disabled]=\"disabled()\"\n  [ngModel]=\"value()\"\n  [value]=\"value()\"\n  (blur)=\"onTouched()\"\n  (ngModelChange)=\"onInputChange($event)\"\n></textarea>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Determines if the input is disabled.</p>\n",
          "line": 50,
          "rawdescription": "\nDetermines if the input is disabled.",
          "modifierKind": [148],
          "required": false
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Sets the HTML id attribute for the input element.</p>\n",
          "line": 54,
          "rawdescription": "\nSets the HTML id attribute for the input element.",
          "modifierKind": [148],
          "required": false
        },
        {
          "name": "placeholder",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Provides a hint or example text that will be displayed</p>\n",
          "line": 56,
          "rawdescription": "\nProvides a hint or example text that will be displayed",
          "modifierKind": [148],
          "required": false
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Determines if the input is disabled.</p>\n",
          "line": 50,
          "rawdescription": "\nDetermines if the input is disabled.",
          "modifierKind": [148],
          "required": false
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Sets the HTML id attribute for the input element.</p>\n",
          "line": 54,
          "rawdescription": "\nSets the HTML id attribute for the input element.",
          "modifierKind": [148],
          "required": false
        },
        {
          "name": "placeholder",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Provides a hint or example text that will be displayed</p>\n",
          "line": 56,
          "rawdescription": "\nProvides a hint or example text that will be displayed",
          "modifierKind": [148],
          "required": false
        },
        {
          "name": "required",
          "defaultValue": "input(false, { transform: booleanAttribute })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Determines if the input is required.</p>\n",
          "line": 52,
          "rawdescription": "\nDetermines if the input is required.",
          "modifierKind": [148]
        },
        {
          "name": "value",
          "defaultValue": "model('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "<p>Holds the current input value.</p>\n",
          "line": 48,
          "rawdescription": "\nHolds the current input value.",
          "modifierKind": [148]
        }
      ],
      "methodsClass": [
        {
          "name": "onInputChange",
          "args": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 84,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\nHandles input change event",
          "description": "<p>Handles input change event</p>\n",
          "jsdoctags": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "FormsModule",
          "type": "module"
        }
      ],
      "description": "<p>ZenTextareaComponent is a reusable textarea component designed to provide\na consistent and customizable textarea style across the application.\nIt supports Angular forms integration and provides two-way data binding.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;zen-textarea value=&quot;string&quot; /&gt;</code></pre></div><p>See <a href=\"https://github.com/kstepien3/ng-zen\">GitHub</a></p>\n",
      "rawdescription": "\n\nZenTextareaComponent is a reusable textarea component designed to provide\na consistent and customizable textarea style across the application.\nIt supports Angular forms integration and provides two-way data binding.\n\n```html\n<zen-textarea value=\"string\" />\n```\n\nSee [GitHub](https://github.com/kstepien3/ng-zen)\n\n",
      "type": "component",
      "sourceCode": "import { booleanAttribute, ChangeDetectionStrategy, Component, forwardRef, input, model } from '@angular/core';\nimport { ControlValueAccessor, FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/**\n * ZenTextareaComponent is a reusable textarea component designed to provide\n * a consistent and customizable textarea style across the application.\n * It supports Angular forms integration and provides two-way data binding.\n *\n * @example\n * <zen-textarea value=\"string\" />\n *\n * @implements {ControlValueAccessor}\n *\n * @author Konrad Stępień\n * @license {@link https://github.com/kstepien3/ng-zen?tab=BSD-2-Clause-1-ov-file|BSD-2-Clause}\n * @see [GitHub](https://github.com/kstepien3/ng-zen)\n *\n * @TODO Content projectile. Textarea doesn't support `<ng-content/>` it needs workaround.\n */\n@Component({\n  selector: 'zen-textarea, zen-textarea[autoresize]',\n  standalone: true,\n  template: `\n    <textarea\n      [attr.id]=\"id()\"\n      [attr.placeholder]=\"placeholder()\"\n      [attr.required]=\"required()\"\n      [disabled]=\"disabled()\"\n      [ngModel]=\"value()\"\n      [value]=\"value()\"\n      (blur)=\"onTouched()\"\n      (ngModelChange)=\"onInputChange($event)\"\n    ></textarea>\n  `,\n  styleUrls: ['./textarea.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ZenTextareaComponent),\n      multi: true,\n    },\n  ],\n  imports: [FormsModule],\n})\nexport class ZenTextareaComponent implements ControlValueAccessor {\n  /** Holds the current input value. */\n  readonly value = model('');\n  /** Determines if the input is disabled. */\n  readonly disabled = model(false);\n  /** Determines if the input is required.*/\n  readonly required = input(false, { transform: booleanAttribute });\n  /** Sets the HTML id attribute for the input element.*/\n  readonly id = input<string>();\n  /** Provides a hint or example text that will be displayed */\n  readonly placeholder = input<string>();\n\n  /** @ignore */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onChange: (value: string) => void = () => {};\n  /** @ignore */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onTouched: () => void = () => {};\n\n  /** @ignore */\n  writeValue(value: string): void {\n    this.value.set(value);\n  }\n  /** @ignore */\n  registerOnChange(fn: (value: string) => void): void {\n    this.onChange = fn;\n  }\n  /** @ignore */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /** @ignore */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled.set(isDisabled);\n  }\n\n  /** Handles input change event */\n  onInputChange(value: string): void {\n    if (this.disabled()) return;\n\n    this.value.set(value);\n    this.onChange(value);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "// Component Variables\n$border: var(--zen-input-border, 1px solid hsl(0% 0% 80%));\n$border-radius: var(--zen-input-border-radius, 8px);\n$padding: var(--zen-input-padding, 0.5rem 1rem);\n$focus-shadow: var(--zen-input-focus-shadow, 0 1px 4px hsla(0% 0% 60% / 20%) inset);\n$placeholder-color: var(--zen-input-placeholder-color, hsl(0% 0% 60%));\n\n// Color Palette\n$outline: var(--zen-outline, 1px solid hsl(0% 0% 60%));\n$error: var(--zen-error, hsl(0% 70% 50%));\n\n:host {\n  display: block;\n}\n\ntextarea {\n  border: $border;\n  border-radius: $border-radius;\n  padding: $padding;\n  height: 100%;\n  width: 100%;\n\n  &:disabled {\n    opacity: 0.6;\n  }\n\n  &:focus-visible {\n    outline: $outline;\n    box-shadow: $focus-shadow;\n  }\n\n  &:user-invalid {\n    border-color: $error;\n  }\n\n  &::placeholder {\n    color: $placeholder-color;\n  }\n}\n\n:host[autoresize] textarea {\n  field-sizing: content\n}\n",
          "styleUrl": "./textarea.component.scss"
        }
      ],
      "stylesData": "",
      "extends": [],
      "implements": ["ControlValueAccessor"]
    }
  ],
  "modules": [],
  "miscellaneous": {
    "variables": [
      {
        "name": "Autoresize",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/src/schematics/components/files/textarea/textarea.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  render: args => ({\n    props: { ...args },\n    template: `\n      <zen-textarea\n       autoresize\n       style=\"width: 300px\"\n      >\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent feugiat suscipit pretium. Etiam egestas ex mauris, at efficitur eros consectetur a. Pellentesque porttitor, lectus vel malesuada efficitur, mi neque euismod dolor, ac efficitur nibh nisi quis risus. Nulla viverra feugiat ex vitae ultrices. Nunc et molestie nulla. Suspendisse dignissim magna nec bibendum volutpat. Phasellus nisi ex, viverra at velit ut, accumsan fringilla libero. Suspendisse potenti. Nunc eu erat a augue egestas pretium in non eros. Suspendisse eget tempus quam. Nulla et sem mollis, tempor eros sed, faucibus arcu. Mauris sit amet ligula aliquam, cursus lorem vitae, lobortis est. Duis non urna sagittis, pretium turpis vel, aliquet sem. Maecenas molestie enim ipsum, sit amet bibendum eros scelerisque sit amet. Mauris aliquet mattis lectus et eleifend.\n      </zen-textarea>`,\n  }),\n}"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/src/schematics/components/files/avatar/avatar.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  render: () => ({\n    template: `\n        <zen-avatar src=\"https://github.com/Kordrad.png\" alt=\"Author\" style=\"--zen-avatar-size: 64px\"/>\n    `,\n  }),\n}"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/src/schematics/components/files/button/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  render: () => ({\n    template: `\n        <button zen-btn>Test</button>\n    `,\n  }),\n}"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/src/schematics/components/files/checkbox/checkbox.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  render: args => ({\n    props: { ...args },\n    template: `\n      <zen-checkbox\n        [disabled]=\"${args.disabled}\"\n        [value]=\"${args.value}\"\n        ${args.id ? 'id=\"' + args.id + '\"' : ''}\n        ${args.required ? 'required' : ''}\n      />`,\n  }),\n}"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/src/schematics/components/files/textarea/textarea.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  render: args => ({\n    props: { ...args },\n    template: `\n      <zen-textarea\n        [disabled]=\"${args.disabled}\"\n        [value]=\"'${args.value}'\"\n        ${args.id ? 'id=\"' + args.id + '\"' : ''}\n        ${args.placeholder ? 'placeholder=\"' + args.placeholder + '\"' : ''}\n        ${args.required ? 'required' : ''}\n      />`,\n  }),\n}"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/src/schematics/components/files/input/input.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  render: args => ({\n    props: { ...args },\n    template: `\n      <zen-input\n        [disabled]=\"${args.disabled}\"\n        [value]=\"'${args.value}'\"\n        ${args.id ? 'id=\"' + args.id + '\"' : ''}\n        ${args.placeholder ? 'placeholder=\"' + args.placeholder + '\"' : ''}\n        ${args.required ? 'required' : ''}\n      />`,\n  }),\n}"
      },
      {
        "name": "Image",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/src/schematics/components/files/avatar/avatar.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  args: {\n    src: 'https://picsum.photos/32',\n  },\n}"
      },
      {
        "name": "preview",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/.storybook/preview.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Preview",
        "defaultValue": "{\n  parameters: {\n    layout: 'centered',\n  },\n}"
      },
      {
        "name": "Text",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/src/schematics/components/files/avatar/avatar.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem;\">\n        <zen-avatar>MI</zen-avatar>\n        <zen-avatar>IB</zen-avatar>\n        <zen-avatar>WP</zen-avatar>\n        <zen-avatar>AI</zen-avatar>\n      </div> `,\n  }),\n}"
      },
      {
        "name": "WithLabel",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/src/schematics/components/files/checkbox/checkbox.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; align-items: center; gap: 0.25rem\">\n        <zen-checkbox id=\"label-example\"/>\n        <label for=\"label-example\"> With label </label>\n      </div>\n  `,\n  }),\n}"
      },
      {
        "name": "WithLabel",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/src/schematics/components/files/textarea/textarea.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column\">\n        <label for=\"label-example\"> With label </label>\n        <zen-textarea id=\"label-example\"/>\n      </div>\n  `,\n  }),\n}"
      },
      {
        "name": "WithLabel",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/src/schematics/components/files/input/input.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column\">\n        <label for=\"label-example\"> With label </label>\n        <zen-input id=\"label-example\"/>\n      </div>\n  `,\n  }),\n}"
      }
    ],
    "functions": [],
    "typealiases": [
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<ZenAvatarComponent>",
        "file": "projects/cli/src/schematics/components/files/avatar/avatar.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<ZenButtonComponent>",
        "file": "projects/cli/src/schematics/components/files/button/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<ZenCheckboxComponent>",
        "file": "projects/cli/src/schematics/components/files/checkbox/checkbox.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<ZenTextareaComponent>",
        "file": "projects/cli/src/schematics/components/files/textarea/textarea.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<ZenInputComponent>",
        "file": "projects/cli/src/schematics/components/files/input/input.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      }
    ],
    "enumerations": [],
    "groupedVariables": {
      "projects/cli/src/schematics/components/files/textarea/textarea.stories.ts": [
        {
          "name": "Autoresize",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/src/schematics/components/files/textarea/textarea.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  render: args => ({\n    props: { ...args },\n    template: `\n      <zen-textarea\n       autoresize\n       style=\"width: 300px\"\n      >\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent feugiat suscipit pretium. Etiam egestas ex mauris, at efficitur eros consectetur a. Pellentesque porttitor, lectus vel malesuada efficitur, mi neque euismod dolor, ac efficitur nibh nisi quis risus. Nulla viverra feugiat ex vitae ultrices. Nunc et molestie nulla. Suspendisse dignissim magna nec bibendum volutpat. Phasellus nisi ex, viverra at velit ut, accumsan fringilla libero. Suspendisse potenti. Nunc eu erat a augue egestas pretium in non eros. Suspendisse eget tempus quam. Nulla et sem mollis, tempor eros sed, faucibus arcu. Mauris sit amet ligula aliquam, cursus lorem vitae, lobortis est. Duis non urna sagittis, pretium turpis vel, aliquet sem. Maecenas molestie enim ipsum, sit amet bibendum eros scelerisque sit amet. Mauris aliquet mattis lectus et eleifend.\n      </zen-textarea>`,\n  }),\n}"
        },
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/src/schematics/components/files/textarea/textarea.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  render: args => ({\n    props: { ...args },\n    template: `\n      <zen-textarea\n        [disabled]=\"${args.disabled}\"\n        [value]=\"'${args.value}'\"\n        ${args.id ? 'id=\"' + args.id + '\"' : ''}\n        ${args.placeholder ? 'placeholder=\"' + args.placeholder + '\"' : ''}\n        ${args.required ? 'required' : ''}\n      />`,\n  }),\n}"
        },
        {
          "name": "WithLabel",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/src/schematics/components/files/textarea/textarea.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column\">\n        <label for=\"label-example\"> With label </label>\n        <zen-textarea id=\"label-example\"/>\n      </div>\n  `,\n  }),\n}"
        }
      ],
      "projects/cli/src/schematics/components/files/avatar/avatar.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/src/schematics/components/files/avatar/avatar.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  render: () => ({\n    template: `\n        <zen-avatar src=\"https://github.com/Kordrad.png\" alt=\"Author\" style=\"--zen-avatar-size: 64px\"/>\n    `,\n  }),\n}"
        },
        {
          "name": "Image",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/src/schematics/components/files/avatar/avatar.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  args: {\n    src: 'https://picsum.photos/32',\n  },\n}"
        },
        {
          "name": "Text",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/src/schematics/components/files/avatar/avatar.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem;\">\n        <zen-avatar>MI</zen-avatar>\n        <zen-avatar>IB</zen-avatar>\n        <zen-avatar>WP</zen-avatar>\n        <zen-avatar>AI</zen-avatar>\n      </div> `,\n  }),\n}"
        }
      ],
      "projects/cli/src/schematics/components/files/button/button.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/src/schematics/components/files/button/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  render: () => ({\n    template: `\n        <button zen-btn>Test</button>\n    `,\n  }),\n}"
        }
      ],
      "projects/cli/src/schematics/components/files/checkbox/checkbox.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/src/schematics/components/files/checkbox/checkbox.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  render: args => ({\n    props: { ...args },\n    template: `\n      <zen-checkbox\n        [disabled]=\"${args.disabled}\"\n        [value]=\"${args.value}\"\n        ${args.id ? 'id=\"' + args.id + '\"' : ''}\n        ${args.required ? 'required' : ''}\n      />`,\n  }),\n}"
        },
        {
          "name": "WithLabel",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/src/schematics/components/files/checkbox/checkbox.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; align-items: center; gap: 0.25rem\">\n        <zen-checkbox id=\"label-example\"/>\n        <label for=\"label-example\"> With label </label>\n      </div>\n  `,\n  }),\n}"
        }
      ],
      "projects/cli/src/schematics/components/files/input/input.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/src/schematics/components/files/input/input.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  render: args => ({\n    props: { ...args },\n    template: `\n      <zen-input\n        [disabled]=\"${args.disabled}\"\n        [value]=\"'${args.value}'\"\n        ${args.id ? 'id=\"' + args.id + '\"' : ''}\n        ${args.placeholder ? 'placeholder=\"' + args.placeholder + '\"' : ''}\n        ${args.required ? 'required' : ''}\n      />`,\n  }),\n}"
        },
        {
          "name": "WithLabel",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/src/schematics/components/files/input/input.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; flex-direction: column\">\n        <label for=\"label-example\"> With label </label>\n        <zen-input id=\"label-example\"/>\n      </div>\n  `,\n  }),\n}"
        }
      ],
      "projects/cli/.storybook/preview.ts": [
        {
          "name": "preview",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/.storybook/preview.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Preview",
          "defaultValue": "{\n  parameters: {\n    layout: 'centered',\n  },\n}"
        }
      ]
    },
    "groupedFunctions": {},
    "groupedEnumerations": {},
    "groupedTypeAliases": {
      "projects/cli/src/schematics/components/files/avatar/avatar.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<ZenAvatarComponent>",
          "file": "projects/cli/src/schematics/components/files/avatar/avatar.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ],
      "projects/cli/src/schematics/components/files/button/button.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<ZenButtonComponent>",
          "file": "projects/cli/src/schematics/components/files/button/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ],
      "projects/cli/src/schematics/components/files/checkbox/checkbox.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<ZenCheckboxComponent>",
          "file": "projects/cli/src/schematics/components/files/checkbox/checkbox.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ],
      "projects/cli/src/schematics/components/files/textarea/textarea.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<ZenTextareaComponent>",
          "file": "projects/cli/src/schematics/components/files/textarea/textarea.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ],
      "projects/cli/src/schematics/components/files/input/input.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<ZenInputComponent>",
          "file": "projects/cli/src/schematics/components/files/input/input.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ]
    }
  },
  "routes": [],
  "coverage": {
    "count": 22,
    "status": "low",
    "files": [
      {
        "filePath": "projects/cli/.storybook/preview.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "preview",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/src/schematics/components/files/avatar/avatar.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ZenAvatarComponent",
        "coveragePercent": 100,
        "coverageCount": "3/3",
        "status": "very-good"
      },
      {
        "filePath": "projects/cli/src/schematics/components/files/avatar/avatar.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/src/schematics/components/files/avatar/avatar.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Image",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/src/schematics/components/files/avatar/avatar.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Text",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/src/schematics/components/files/avatar/avatar.stories.ts",
        "type": "type alias",
        "linktype": "miscellaneous",
        "linksubtype": "typealias",
        "name": "Story",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/src/schematics/components/files/button/button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ZenButtonComponent",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "projects/cli/src/schematics/components/files/button/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/src/schematics/components/files/button/button.stories.ts",
        "type": "type alias",
        "linktype": "miscellaneous",
        "linksubtype": "typealias",
        "name": "Story",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/src/schematics/components/files/checkbox/checkbox.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ZenCheckboxComponent",
        "coveragePercent": 100,
        "coverageCount": "9/9",
        "status": "very-good"
      },
      {
        "filePath": "projects/cli/src/schematics/components/files/checkbox/checkbox.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/src/schematics/components/files/checkbox/checkbox.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "WithLabel",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/src/schematics/components/files/checkbox/checkbox.stories.ts",
        "type": "type alias",
        "linktype": "miscellaneous",
        "linksubtype": "typealias",
        "name": "Story",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/src/schematics/components/files/input/input.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ZenInputComponent",
        "coveragePercent": 100,
        "coverageCount": "10/10",
        "status": "very-good"
      },
      {
        "filePath": "projects/cli/src/schematics/components/files/input/input.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/src/schematics/components/files/input/input.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "WithLabel",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/src/schematics/components/files/input/input.stories.ts",
        "type": "type alias",
        "linktype": "miscellaneous",
        "linksubtype": "typealias",
        "name": "Story",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/src/schematics/components/files/textarea/textarea.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ZenTextareaComponent",
        "coveragePercent": 100,
        "coverageCount": "10/10",
        "status": "very-good"
      },
      {
        "filePath": "projects/cli/src/schematics/components/files/textarea/textarea.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Autoresize",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/src/schematics/components/files/textarea/textarea.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/src/schematics/components/files/textarea/textarea.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "WithLabel",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/src/schematics/components/files/textarea/textarea.stories.ts",
        "type": "type alias",
        "linktype": "miscellaneous",
        "linksubtype": "typealias",
        "name": "Story",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      }
    ]
  }
}
